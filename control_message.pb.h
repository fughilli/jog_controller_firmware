/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.4 */

#ifndef PB_CONTROL_MESSAGE_PB_H_INCLUDED
#define PB_CONTROL_MESSAGE_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _Control_Axis {
    Control_Axis_AXIS_X = 0,
    Control_Axis_AXIS_Y = 1,
    Control_Axis_AXIS_Z = 2,
    Control_Axis_AXIS_4 = 3,
    Control_Axis_AXIS_5 = 4,
    Control_Axis_AXIS_6 = 5
} Control_Axis;

typedef enum _Control_Multiplier {
    Control_Multiplier_MULT_X1 = 0,
    Control_Multiplier_MULT_X10 = 1,
    Control_Multiplier_MULT_X100 = 2
} Control_Multiplier;

/* Struct definitions */
typedef struct _Control {
    bool has_value;
    int32_t value;
    bool has_axis;
    Control_Axis axis;
    bool has_multiplier;
    Control_Multiplier multiplier;
    bool has_key_pressed;
    int32_t key_pressed;
    bool has_key_released;
    int32_t key_released;
    bool has_port_a_flag;
    bool port_a_flag;
    bool has_port_b_flag;
    bool port_b_flag;
    bool has_port_mask;
    uint32_t port_mask;
    bool has_feedhold;
    bool feedhold;
    bool has_estop;
    bool estop;
} Control;


/* Helper constants for enums */
#define _Control_Axis_MIN Control_Axis_AXIS_X
#define _Control_Axis_MAX Control_Axis_AXIS_6
#define _Control_Axis_ARRAYSIZE ((Control_Axis)(Control_Axis_AXIS_6+1))

#define _Control_Multiplier_MIN Control_Multiplier_MULT_X1
#define _Control_Multiplier_MAX Control_Multiplier_MULT_X100
#define _Control_Multiplier_ARRAYSIZE ((Control_Multiplier)(Control_Multiplier_MULT_X100+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Control_init_default                     {false, 0, false, _Control_Axis_MIN, false, _Control_Multiplier_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define Control_init_zero                        {false, 0, false, _Control_Axis_MIN, false, _Control_Multiplier_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Control_value_tag                        1
#define Control_axis_tag                         2
#define Control_multiplier_tag                   3
#define Control_key_pressed_tag                  4
#define Control_key_released_tag                 5
#define Control_port_a_flag_tag                  6
#define Control_port_b_flag_tag                  7
#define Control_port_mask_tag                    8
#define Control_feedhold_tag                     9
#define Control_estop_tag                        10

/* Struct field encoding specification for nanopb */
#define Control_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    value,             1) \
X(a, STATIC,   OPTIONAL, UENUM,    axis,              2) \
X(a, STATIC,   OPTIONAL, UENUM,    multiplier,        3) \
X(a, STATIC,   OPTIONAL, INT32,    key_pressed,       4) \
X(a, STATIC,   OPTIONAL, INT32,    key_released,      5) \
X(a, STATIC,   OPTIONAL, BOOL,     port_a_flag,       6) \
X(a, STATIC,   OPTIONAL, BOOL,     port_b_flag,       7) \
X(a, STATIC,   OPTIONAL, UINT32,   port_mask,         8) \
X(a, STATIC,   OPTIONAL, BOOL,     feedhold,          9) \
X(a, STATIC,   OPTIONAL, BOOL,     estop,            10)
#define Control_CALLBACK NULL
#define Control_DEFAULT NULL

extern const pb_msgdesc_t Control_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Control_fields &Control_msg

/* Maximum encoded size of messages (where known) */
#define Control_size                             51

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
